
15.5 Multiple plots

A plot with too much data can be difficult to read. Furthermore, if different data series in the plot have different ranges of values, then interpreting the data becomes impossible. Consider the program below that plots two data series:
Figure 15.5.1: Two types of data on the same plot.

import numpy as np
import matplotlib.pyplot as plt

# Wave parameters
FREQUENCY = 3
SAMPLING_RATE = 100
TIME_STEP = 1.0 / SAMPLING_RATE

# Like range() for floating point
t1 = np.arange(0.0, 5.0, TIME_STEP)

# Compute a sine wave
wave = np.sin(FREQUENCY*2*np.pi*t1)

# Compute Fast Fourier Transform (FFT)
fft_result = np.fft.fft(wave)

# Compute x-axis values for frequency domain
t2 = np.fft.fftfreq(len(t1), TIME_STEP)

plt.plot(t1, wave)
plt.plot(t2, np.abs(fft_result))
plt.show()



Basic line plot with multiple data series that are not scaled. The sine wave in blue is difficult to see as the y values range from -1 to 1, but appears as a flat line at y = 0. The FFT result is shown in blue and dominates the figure as the y values range from 0 to 250.

The above program attempts to plot a 3 Hertz sine wave and the amplitude spectrum of the Fast Fourier Transform (FFT) of the wave. However, the plot does not convey much useful information because the axes have been automatically scaled to fit the larger FFT result values, making the sine wave (in blue) difficult to see.

The two plotted series require different axes; the x-axis of the sine wave is time (seconds), and the x-axis of the FFT result is frequency (Hertz). The figure() function can be used to create multiple figures. Each figure corresponds to a window frame to be opened by matplotlib, and each figure can contain a plot that uses different axes.
Figure 15.5.2: Using multiple figures.

import numpy as np
import matplotlib.pyplot as plt

# Unique identifiers for each figure
FIGURE1 = 1
FIGURE2 = 2

# Wave parameters
FREQUENCY = 3
SAMPLING_RATE = 100
TIME_STEP = 1.0 / SAMPLING_RATE

# Like range() for floating point
t1 = np.arange(0.0, 5.0, TIME_STEP)

# Compute a sine wave
wave = np.sin(FREQUENCY*2*np.pi*t1)

# Compute Fast Fourier Transform (FFT)
fft_result = np.fft.fft(wave)

# Compute x-axis values for frequency domain
t2 = np.fft.fftfreq(len(t1), TIME_STEP)

plt.figure(FIGURE1)
plt.plot(t1, wave)
plt.xlabel("Time (seconds)")
plt.ylabel("Amplitude")
plt.axis([-1, 6, -1.2, 1.2])  # Empty space buffer

plt.figure(FIGURE2)
plt.plot(t2, np.abs(fft_result))
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")

# Set plot axis ranges [min_x, max_x, min_y, max_y]
plt.axis([-5, 5, 0, 260])

plt.show()



Basic sine graph corresponding to plt.figure(FIGURE1) command. Graph shows a sine wave from time 0 to 5 seconds with y values ranging from -1 to 1.
FFT results graph corresponding to plt.figure(FIGURE2) command. Graph shows a spike at -3 and at 3. The y values range from 0 to 250.

The figure() function sets the current figure, using the argument to identify the figure to activate. Subsequent calls like plt.plot() and plt.xlabel() affect the current figure. The first figure is created by matplotlib automatically; calling figure(FIGURE1) in previous examples was unnecessary. The call to figure(FIGURE2) is needed to create a new figure for the FFT plot.
The plt.axis() function is used to set the range of the x and y axes. A single list argument specifies the minimum and maximum values of each axis: [min_x, max_x, min_y, max_y]. Above, the axes of the signal frequency plot are set to show only the interesting region of the plot.
participation activity
15.5.1: Multiple figures.
1)
FIGURE1 has an x-axis label of "Seconds".

plt.figure(FIGURE1)
plt.plot(t1, y1)
plt.xlabel("Time")
plt.ylabel("Volts")


plt.figure(FIGURE2)
plt.plot(t2, y2)
plt.xlabel("Seconds")

2)
FIGURE1 and FIGURE2 both have a legend.

plt.figure(FIGURE1)
plt.plot(t1, y1, label="One")
plt.legend()

plt.figure(FIGURE2)
plt.plot(t2, y2, label="Two")
plt.xlabel("Seconds")

The subplot() function allows multiple plots to be created in a single figure, with each subplot having its own set of axes. Subplots are often preferable to multiple figures when related data is plotted.
Figure 15.5.3: Using subplots.

import numpy as np
import matplotlib.pyplot as plt

# Unique identifiers for each figure
FIGURE1 = 1
FIGURE2 = 2

# Wave parameters
FREQUENCY = 3
SAMPLING_RATE = 100
TIME_STEP = 1.0 / SAMPLING_RATE

# Like range() for floating point
t1 = np.arange(0.0, 5.0, TIME_STEP)

# Compute a sine wave
wave = np.sin(FREQUENCY*2*np.pi*t1)

# Compute Fast Fourier Transform (FFT)
fft_result = np.fft.fft(wave)

# Compute x-axis values for frequency domain
t2 = np.fft.fftfreq(len(t1), TIME_STEP)

plt.subplot(2, 1, 1)  # 2 rows, 1 column. Use loc 1
plt.plot(t1, wave)
plt.xlabel("Time (seconds)")
plt.ylabel("Amplitude")
plt.axis([-1, 6, -1.2, 1.2])  # Empty space buffer

plt.subplot(2, 1, 2)  # 2 rows, 1 column. Use loc 2
plt.plot(t2, np.abs(fft_result))
plt.xlabel("Frequency (Hz)")
plt.ylabel("Magnitude")

# Set plot axis ranges [min_x, max_x, min_y, max_y]
plt.axis([-5, 5, 0, 260])

plt.tight_layout(pad=1.0) # Add padding between plots
plt.show()



The separate sine wave graph and FFT result graph were previously two separate figures. The subplot command enables the graphs to appear within a single figure, with the sine wave appearing above the FFT result graph.

Subplot() sets the active subplot; subsequent calls affect only the current figure and subplot. The first and second arguments specify the number of rows and columns to use. The third argument specifies the current active subplot, and must contain a value between 1 and (number of rows * number of columns).
participation activity
15.5.2: Subplots.
1)
Complete the subplot() call to set the active subplot to the shown subplot below.

A figure of 2x1 subplots with only one subplot shown on the bottom.

plt.subplot()

2)
Complete the subplot() call to set the active subplot to the shown subplot below.

A figure of 2x2 subplots with only one subplot shown on the bottom right.

plt.subplot()

In some cases a second y-axis allows combining different types of data into the same plot, as long as the x-axis units are the same. The twinx() function creates a second axis on a plot.
Figure 15.5.4: Adding a second y-axis on the right side of a plot.

import matplotlib.pyplot as plt

with open('dd_stats.csv') as f:
    total_fatalities = []
    alcohol_fatalities = []
    percentages = []
    for line in f:
        total, alcohol = line.split(',')
        total_fatalities.append(int(total))
        alcohol_fatalities.append(int(alcohol))
        percentages.append(float(alcohol) / float(total) * 100)

years = range(1970, 2012)

figure = plt.figure()
left_axis = figure.add_subplot(1, 1, 1)
right_axis = left_axis.twinx()

left_axis.plot(years, total_fatalities, label="Total")
left_axis.plot(years, alcohol_fatalities, label="Alcohol-related")
right_axis.plot(years, percentages, 'r--', label="% alcohol-related")
right_axis.axis([1970, 2012, 0, 100])

left_axis.set_xlabel('Year')
left_axis.set_ylabel('Number of highway fatalities')
left_axis.legend(loc="upper left")
right_axis.set_ylabel('% fatalities involving alcohol')
right_axis.legend(loc="upper right")

plt.show()



A triple line graph showing a y-axis with label 'Number of highway fatalities' and corresponding values the left side and a label '% fatalities involving alcohol' label and corresponding values on the right side.

The program above adds a new data series showing the percentage of fatalities related to alcohol for a given year. y-axis values of these percentages range from 0-100, while the y-axis values of fatalities range from 0-60000. A separate y-axis is required (otherwise the percentage data series would be indistinguishable from 0 once the plot is scaled).

figure.addsubplot() is called, which returns the subplot axis (the actual creation of the default subplot is not important or necessary). twinx() is called to create the right-side axis. left_axis and right_axis can then be used to set axis labels, plot data series, and enable legends.
participation activity
15.5.3: Using multiple axes, subplots, and figures.
1)
A 2nd y-axis is only useful if the x-axis values of all the data series in the plot are similar.
2)
set_right_ylabel() creates the right-side axis.
How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
16.1 Searching and algorithms
