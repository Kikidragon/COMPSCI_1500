
15.4 Numpy

The numpy package provides tools for scientific and mathematical computations in Python. For example, numpy includes functions that can be used to perform common linear algebra operations, fast fourier transforms, and statistics. Numpy must be downloaded and installed from http://www.scipy.org/scipylib/download.html

Numpy uses an array data type that is conceptually similar to a list, consisting of an ordered set of elements of the same type. An array can be created using the array() constructor from the numpy package. Multidimensional arrays are created by specifying a list with a tuple for each dimension's elements.
Figure 15.4.1: Creating arrays.

import numpy as np

# 1-dimension array
my_array1 = np.array([15.5, 25.11, 19.0])
print('my_array_1:')
print(my_array1)
print()

# 2-dimension array
my_array2 = np.array([(34, 25), (16, 12)])
print('my_array_2:')
print(my_array2)



my_array_1:
[ 15.5   25.11  19.  ]

my_array_2:
[[34 25]
 [16 12]]

Sometimes an array must be created before the element values are known. Changing the size of an array is an expensive computation, so numpy provides functions that create empty pre-sized arrays. The zeros() function creates an array with a 0 for every element, and ones() uses 1 for every element. The argument to zeros() and ones() is an integer (length) for a 1-dimensional array, or a tuple (row length, column length) for a 2-dimensional array.
Figure 15.4.2: Pre-initialized arrays.

import numpy as np

zero_array = np.zeros(5)   # 1-dimension array with 5 elements
print('zero_array:')
print(zero_array)
print()

one_array = np.ones((5, 2))  # 2-dimension array with 5 rows and 2 elements per row (2 columns)
print('one_array:')
print(one_array)



zero_array:
[ 0.  0.  0.  0.  0.]

one_array:
[[ 1.  1.]
 [ 1.  1.]
 [ 1.  1.]
 [ 1.  1.]
 [ 1.  1.]]

participation activity
15.4.1: Creating arrays.

Choose the answer that creates the shown array:
1)

[[ 5 10 15 ]]

2)

[[ 0. 0.]
  [0. 0.]
  [0. 0.]]

A common operation is to create a sequence of numbers, like 0, 1, 2, ... using range(). However, range() creates sequences of integers only and can not generate fractional values. The linspace numpy function creates a sequence by segmenting a given range with a specified number of points. For example, linspace(0, 1, 11) creates a sequence with 11 elements between 0 and 1: 0, 0.1, 0.2, ..., 0.9, 1.0.
Figure 15.4.3: Creating sequences using linspace().

import numpy as np

print(np.linspace(0, 1, 11))
print()
print(np.linspace(0, np.sin(np.pi/4), 20))



[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1. ]

[ 0.          0.03721615  0.07443229  0.11164844  0.14886459  0.18608073
  0.22329688  0.26051302  0.29772917  0.33494532  0.37216146  0.40937761
  0.44659376  0.4838099   0.52102605  0.5582422   0.59545834  0.63267449
  0.66989063  0.70710678]

participation activity
15.4.2: Creating sequences.
1)
Use np.linspace() to create the sequence:

[ 0.25 0.5 0.75 1.0 ]

Mathematical operations between arrays are performed between the matching elements of each array. For example, [5 5 5] + [1 2 3] would compute [5+1 5+2 5+3], or [6 7 8]. The program below shows some common array operations.
Figure 15.4.4: Array operations program.

import numpy as np

array1 = np.array([10, 20, 30, 40])
array2 = np.array([1, 2, 3, 4])

# Some common array operations

print('Adding arrays (array1 + array2)')
print(array1 + array2)

print('\nSubtracting arrays (array1 - array2)')
print(array1 - array2)

print('\nMultiplying arrays (array1 * array2)')
print(array1 * array2)

print('\nMatrix multiply (dot(array1 * array2))')
print(np.dot(array1, array2))

print('\nFinding square root of each element in array1')
print(np.sqrt(array1))

print('\nFinding minimum element in array1')
print(array1.min())

print('\nFinding maximum element in array1')
print(array1.max())



Adding arrays (array1 + array2)
[11 22 33 44]

Subtracting arrays (array1 - array2)
[ 9 18 27 36]

Multiplying arrays (array1 * array2)
[ 10  40  90 160]

Matrix multiply (dot(array1 * array2))
300

Finding square root of each element in array1
[ 3.16227766  4.47213595  5.47722558  6.32455532]

Finding minimum element in array1
10

Finding maximum element in array1
40

Exploring further:

    numpy documentation
    numpy tutorial

How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
15.5 Multiple plots
