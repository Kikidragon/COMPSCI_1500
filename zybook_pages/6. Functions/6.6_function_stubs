
zyBooks

    My library
    >
    COMP SCI 1500: Computational Problem Solving home
    >
    6.6: Function stubs

You have unverified email(s). Please click on your name in the top right corner and browse to your profile to send another verification email.
6.5 Writing mathematical functions
Students:
Section 6.6 is a part of 2 assignments:
Requirements:
PA
Due: 12/10/2021, 11:59 PM CST
6.6 Function stubs
Incremental development and function stubs

Programs are typically written using incremental development, meaning a small amount of code is written and tested, then a small amount more (an incremental amount) is written and tested, and so on.

To assist with the incremental development process, programmers commonly introduce function stubs, which are function definitions whose statements haven't been written yet. The benefit of a function stub is that the high-level behavior of the program can be captured before diving into details of each function, akin to planning the route of a road trip before starting to drive. Capturing high-level behavior first may lead to better-organized code, reduced development time, and even to code with fewer bugs.

A programmer writing a function stub should consider whether or not calling the unwritten function is a valid operation. Simply doing nothing and returning nothing may be acceptable early in the development of a larger program. One approach is to use the pass keyword, which performs no operation except to act as a placeholder for a required statement.
Figure 6.6.1: Using the pass statement in a function stub performs no operation.

def steps_to_feet(num_steps):
    feet_per_step = 3
    feet = num_steps * feet_per_step
    return feet

def steps_to_calories(num_steps):
    pass

steps = int(input('Enter number of steps walked: '))

feet = steps_to_feet(steps)
print('Feet:', feet)

calories = steps_to_calories(steps)
print('Calories:', calories)



Enter number of steps walked: 1000
Feet: 3000
Calories: None
...
Enter number of steps walked: 0
Feet: 0
Calories: None
...
Enter number of steps walked: 99999
Feet: 299997
Calories: None

The program above has a function stub in place of the steps_to_calories() function. The function contains a single pass statement because at least one statement is required in any user-defined function.

Another useful approach is to print a message when a function stub is called, thus alerting the user to the missing function statements. Good practice is for a stub to return -1 for a function that will have a return value. The following function stub could be used to replace the steps_to_calories() stub in the program above:
Figure 6.6.2: A function stub using a print statement.

def steps_to_calories(steps):
    print(' finish steps_to_calories')
    return -1

In some cases, a programmer may want a program to stop executing if an unfinished function is called. Ex: A program that requires user input should not execute if the user-defined function that gets input is not completed. In such cases, a NotImplementedError can be generated with the statement raise NotImplementedError. The NotImplementedError indicates that the function is not implemented and causes the program to stop execution. NotImplementedError and the "raise" keyword are explored elsewhere in material focusing on exceptions. The following demonstrates an error being generated by a function stub:
Figure 6.6.3: Stopping the program using NotImplementedError in a function stub.

import math

def get_points(num_points):
    """Get num_points from the user. Return a list of (x,y) tuples."""
    raise NotImplementedError

def side_length(p1, p2):
    return math.sqrt((p2[0] - p1[0])**2 + (p2[1] - p1[1])**2)

def get_perimeter_length(points):
    perimeter = side_length(points[0], points[1])
    perimeter += side_length(points[0], points[2])
    perimeter += side_length(points[1], points[2])
    return perimeter

coordinates = get_points(3)
print('Perimeter of triangle:', get_perimeter_length(coordinates))



Traceback (most recent call last):
 File "<stdin>", line 10, in glt;module<
 File "<stdin>", line 2, in get_points
NotImplementedError

participation activity
6.6.1: Incremental development and function stubs.
1)
Incremental development may involve more frequent testing, but ultimately leads to faster development of a program.
2)
The main advantage of function stubs is that they ultimately lead to faster-running programs.
3)
A pass statement should be used in a function stub when the programmer wants the stub to stop program execution when called.
challenge activity
6.6.1: Function stubs: Statistics.
Define stubs for the functions get_user_num() and compute_avg(). Each stub should print "FIXME: Finish function_name()" followed by a newline, and should return -1. Each stub must also contain the function's parameters.

Sample output with two calls to get_user_num() and one call to compute_avg():

 fix me Finish get_user_num()
 fix me Finish get_user_num()
 fix me Finish compute_avg()
Avg: -1



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
How was this section?
Activity summary for assignment:
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
6.7 Functions with branches/loops
