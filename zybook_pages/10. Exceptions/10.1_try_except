
10.1 Handling exceptions using try and except

Error-checking code is code that a programmer introduces to detect and handle errors that may occur while the program executes. Python has special constructs known as exception-handling constructs because they handle exceptional circumstances, another word for errors during execution.

Consider the following program that has a user enter weight and height, and that outputs the corresponding body-mass index (BMI is one measure used to determine normal weight for a given height).
Figure 10.1.1: BMI example without exception handling.

user_input = ''
while user_input != 'q':
    weight = int(input("Enter weight (in pounds): "))
    height = int(input("Enter height (in inches): "))

    bmi = (float(weight) / float(height * height)) * 703
    print('BMI:', bmi)
    print('(CDC: 18.6-24.9 normal)\n')
    # Source www.cdc.gov

    user_input = input("Enter any key ('q' to quit): ")



Enter weight (in pounds): 150
Enter height (in inches): 66
BMI: 24.207988980716255
(CDC: 18.6-24.9 normal)

Enter any key ('q' to quit): a
Enter weight (in pounds): One-hundred fifty
Traceback (most recent call last):
  File "test.py", line 3, in <module>
    weight = int(input("Enter weight (in pounds): "))
ValueError: invalid literal for int() with base 10: 'One-hundred fifty'

Above, the user entered a weight by writing out "One-hundred fifty", instead of giving a number such as "150", which caused the int() function to produce an exception of type ValueError. The exception causes the program to terminate.

Commonly, a program should gracefully handle an exception and continue executing, instead of printing an error message and stopping completely. Code that potentially may produce an exception is placed in a try block. If the code in the try block causes an exception, then the code placed in a following except block is executed. Consider the program below, which modifies the BMI program to handle bad user input.
Figure 10.1.2: BMI example with exception handling using try/except.

user_input = ''
while user_input != 'q':
    try:
        weight = int(input("Enter weight (in pounds): "))
        height = int(input("Enter height (in inches): "))

        bmi = (float(weight) / float(height * height)) * 703
        print('BMI:', bmi)
        print('(CDC: 18.6-24.9 normal)\n')  # Source www.cdc.gov
    except:
        print('Could not calculate health info.\n')

    user_input = input("Enter any key ('q' to quit): ")



Enter weight (in pounds): 150
Enter height (in inches): 66
BMI: 24.207988980716255
(CDC: 18.6-24.9 normal)

Enter any key ('q' to quit): a
Enter weight (in pounds): One-hundred fifty
Could not calculate health info.

Enter any key ('q' to quit): a
Enter weight (in pounds): 200
Enter height (in inches): 62
BMI: 36.57648283038502
(CDC: 18.6-24.9 normal)

Enter any key ('q' to quit): q

The try and except constructs are used together to implement exception handling, meaning handling exceptional conditions (errors during execution). A programmer could add additional code to do their own exception handling, e.g., checking if every character in the user input string is a digit, but such code would make the original program difficult to read.
Construct 10.1.1: Basic exception handling constructs.

try:
    # ... Normal code that might produce errors
except: # Go here if any error occurs in try block
    # ... Exception handling code

participation activity
10.1.1: How try and except blocks handle exceptions.

try:
    ...
    x = int('Ten')  # Causes ValueError
    ...
    ...
except:
    # Handle exception, e.g., print message

...


Error message...
Captions

    When a try is reached, the statements in the try block are executed.
    Any statements in the try block not executed before the exception occurred are skipped.

When a try is reached, the statements in the try block are executed. If no exception occurs, the except block is skipped and the program continues. If an exception does occur, the except block is executed, and the program continues after the try block. Any statements in the try block not executed before the exception occurred are skipped.
participation activity
10.1.2: Exception basics.
1)
Execution jumps to an except block only if an error occurs in the preceding try block.
2)
After an error occurs in a try block, and the following except block has executed, execution resumes after where the error occurred in the try block.
Table 10.1.1: Common exception types.
Type 	Reason exception is raised
EOFError 	input() hits an end-of-file condition (EOF) without reading any input
KeyError 	A dictionary key is not found in the set of keys
ZeroDivisionError 	Divide by zero error
ValueError 	Invalid value (Ex: Input mismatch)
IndexError 	Index out of bounds

Source: Python: Built-in Exceptions
How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
10.2 Multiple exception handlers
