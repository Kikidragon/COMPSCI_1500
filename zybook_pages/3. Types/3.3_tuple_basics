
3.3 Tuple basics
Tuples

A tuple, usually pronounced "tuhple" or "toople", behaves similar to a list but is immutable â€“ once created the tuple's elements cannot be changed. A tuple is also a sequence type, supporting len(), indexing, and other sequence type functions. A new tuple is generated by creating a list of comma-separated values, such as 5, 15, 20. Typically, tuples are surrounded with parentheses, as in (5, 15, 20). Note that printing a tuple always displays surrounding parentheses.

A tuple is not as common as a list in practical usage, but can be useful when a programmer wants to ensure that values do not change. Tuples are typically used when element position, and not just the relative ordering of elements, is important. Ex: A tuple might store the latitude and longitude of a landmark because a programmer knows that the first element should be the latitude, the second element should be the longitude, and the landmark will never move from those coordinates.
Figure 3.3.1: Using tuples.

white_house_coordinates = (38.8977, 77.0366)
print('Coordinates:', white_house_coordinates)
print('Tuple length:', len(white_house_coordinates))

# Access tuples via index
print('\nLatitude:', white_house_coordinates[0], 'north')
print('Longitude:', white_house_coordinates[1], 'west\n')

# Error. Tuples are immutable
white_house_coordinates[1] = 50



Coordinates: (38.8977, 77.0366)
Tuple length: 2

Latitude: 38.8977 north
Longitude: 77.0366 west

Traceback (most recent call last):
  File "<stdin>", line 10, in <module>
TypeError: 'tuple' object does not support item assignment

participation activity
3.3.1: Tuples.
1)
Create a new variable point that is a tuple containing the strings 'X string' and 'Y string'.

2)
If the value of variable friends is the tuple ('Cleopatra', 'Marc', 'Seneca'), then what is the result of len(friends)?

challenge activity
3.3.1: Initialize a tuple.
Initialize the tuple team_names with the strings 'Rockets', 'Raptors', 'Warriors', and 'Celtics' (The top-4 2018 NBA teams at the end of the regular season in order). Sample output for the given program:

Rockets
Raptors
Warriors
Celtics



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
Named tuples

A program commonly captures collections of data; for example, a car could be described using a series of variables describing the make, model, retail price, horsepower, and number of seats. A named tuple allows the programmer to define a new simple data type that consists of named attributes. A Car named tuple with fields like Car.price and Car.horsepower would more clearly represent a car object than a list with index positions correlating to some attributes.

The namedtuple package must be imported to create a new named tuple. Once the package is imported, the named tuple should be created like in the example below, where the name and attribute names of the named tuple are provided as arguments to the namedtuple constructor. Note that the fields to include in the named tuple are found in a list, but may also be a single string with space or comma separated values.
Figure 3.3.2: Creating named tuples.

from collections import namedtuple

Car = namedtuple('Car', ['make','model','price','horsepower','seats'])  # Create the named tuple

chevy_blazer = Car('Chevrolet', 'Blazer', 32000, 275, 8)  # Use the named tuple to describe a car
chevy_impala = Car('Chevrolet', 'Impala', 37495, 305, 5)  # Use the named tuple to describe a different car

print(chevy_blazer)
print(chevy_impala)

Car(make='Chevrolet', model='Blazer', price=32000, horsepower=275, seats=8)
Car(make='Chevrolet', model='Impala', price=37495, horsepower=305, seats=5)

namedtuple() only creates the new simple data type, and does not create new data objects. Above, a new data object is not created until Car() is called with appropriate values. A data object's attributes can be accessed using dot notation, as in chevy_blazer.price. This "named" attribute is simpler to read than if using a list or tuple referenced via index like chevy_blazer[2].

Like normal tuples, named tuples are immutable. A programmer wishing to edit a named tuple would replace the named tuple with a new object.
participation activity
3.3.2: Named tuples.
Assume namedtuple has been imported. Use a list of strings in the namedtuple() constructor where applicable.
1)
Complete the following named tuple definition that describes a house.

House = ('House', ['street', 'postal_code', 'country'])

2)
Create a new named tuple Dog that has the attributes name, breed, and color.

3)
Let Address = namedtuple('Address', ['street', 'city', 'country']). Create a new address object house where house.street is "221B Baker Street", house.city is "London", and house.country is "England".

4)
Given the following named tuple Car = namedtuple('Car', ['make', 'model', 'price', 'horsepower', 'seats']), and data objects car1 and car2, write an expression that computes the sum of the price of both cars.

challenge activity
3.3.2: Creating a named tuple
Define a named tuple Player that describes an athlete on a sports team. Include the fields name, number, position, and team.

343716.2144758.qx3zqy7

1 test passed
All tests passed
View your last submission
How was this section?
Activity summary for assignment:
406 / 412 pts
Due: 12/10/2021, 11:59 PM CST
406 / 412 pts submitted to canvas
3.4 Set basics
