
13.1 Derived classes

A class will commonly share attributes with another class, but with some additions or variations. For example, a store inventory system might use a class called Item, having name and quantity attributes. But for fruits and vegetables, a class Produce might have name, quantity, and expiration date attributes. Note that Produce is really an Item with an additional feature, so ideally a program could define the Produce class as being the same as the Item class but with the addition of an expiration date attribute.

Such similarity among classes is supported by indicating that a class is derived from another class, as shown below.
Figure 13.1.1: A derived class example: Class Produce is derived from class Items.

class Item:
    def __init__(self):
        self.name = ''
        self.quantity = 0

    def set_name(self, nm):
        self.name = nm

    def set_quantity(self, qnty):
        self.quantity = qnty

    def display(self):
        print(self.name, self.quantity)


class Produce(Item):  # Derived from Item
    def __init__(self):
        Item.__init__(self)  # Call base class constructor
        self.expiration = ''

    def set_expiration(self, expir):
        self.expiration = expir

    def get_expiration(self):
        return self.expiration

item1 = Item()
item1.set_name('Smith Cereal')
item1.set_quantity(9)
item1.display()

item2 = Produce()
item2.set_name('Apples')
item2.set_quantity(40)
item2.set_expiration('May 5, 2012')
item2.display()
print('  (Expires:({}))'.format(item2.get_expiration()))



Smith Cereal 9
Apples 40
  (Expires:(May 5, 2012))

The example defines a class named Item. In the script, an instance of Item called item1 is created, the instance's attributes are set to Smith Cereal and 9, and the display() method is called. A class named Produce is also defined, that class was derived from the Item class by including the base class Item within parentheses after Produce, i.e., class Produce(Item):. As such, instantiating a Produce instance item2 creates an instance object with data attributes name and quantity (from Item), plus expiration (from Produce), as well as with the methods set_name(), set_quantity(), and display() from Item, and set_expiration() and get_expiration() from Produce. In the script, item2 has instance data attributes set to Apples, 40, and May 5, 2012. The display() method is called, and then the expiration date is printed using the get_expiration() method.interfaces

All of the class attributes of Item are available to instances of Produce, though instance attributes are not. The __init__ method of Item must be explicitly called in the constructor of Produce, e.g., Item.__init__(self), so that the instance of Produce is assigned the name and quantity data attributes. When an instantiation of a Produce instance occurs, Produce.__init__() executes and immediately calls Item.__init__(). The newly created Produce instance is passed as the first argument (self) to the Item constructor, which creates the name and quantity attributes in the new Item instance's namespace. Item.__init__() returns, and Produce.__init__() continues, creating the expiration attribute. The following tool illustrates:
participation activity
13.1.1: Derived class explicitly calls base class' constructor.
1	class Item:
2	    def __init__(self):
3	        self.name = ''
4	        self.quantity = 0
5
6	class Produce(Item):
7	    def __init__(self):
8	        Item.__init__(self)
9	        self.expiration = ''
10
11	item1 = Item()
12	item2 = Produce()
Step 1 of 16
line that has just executed

next line to execute
Frames

Objects

The term derived class refers to a class that inherits the class attributes of another class, known as a base class. Any class may serve as a base class; no changes to the definition of that class are required. The derived class is said to inherit the attributes of its base class, a concept commonly called inheritance. An instance of a derived class type has access to all the attributes of the derived class as well as the class attributes of the base class by default, including the base class' methods. A derived class instance can simulate inheritance of instance attributes as well by calling the base class constructor manually. The following animation illustrates the relationship between a derived class and a base class.
participation activity
13.1.2: Derived class example: Produce derived from Item.

item1 = Item()
item2 = Produce()

# ...


Item
Produce
item1
item2
.......................................................
Access to:
Access to:
Produce
Item
name
quantity
display()

set_name()
set_quantity()

name
quantity
display()
expiration

set_name()
set_quantity()
get_expiration()
set_expiration

Captions

    Item is the base class.
    Produce is derived so Produce inherits Item's attributes.

The inheritance relationship is commonly drawn as follows, using Unified Modeling Language (UML) notation (Wikipedia: UML).
participation activity
13.1.3: UML derived class example: Produce derived from Item.
Item
+name
+quantity
+set_name()
+set_quantity()
+display()
Produce
+expiration
+set_expiration()
+get_expiration()
Member access
- means private
+ means public
# means protected

class name

data
members

methods


Captions

    A class diagram depicts a class' name, data members, and methods.
    A solid line with a closed, unfilled arrowhead indicates a class is derived from another class.
    The derived class only shows additional members.

In the above animation, the +, -, and # symbols refer to the access level of an attribute, i.e., whether or not that attribute can be accessed by anyone (public), only instances of that class (private), or instances derived from that class (protected), respectively. In Python, all attributes are public.privacy. Many languages, like Java, C, and C++, explicitly require setting access levels on every variable and function in a class, thus UML as a language-independent tool includes the symbols.

Various class derivation variations are possible:

    A derived class can itself serve as a base class for another class. In the earlier example, "class Fruit(Produce):" could be added.
    A class can serve as a base class for multiple derived classes. In the earlier example, "class Book(Item):" could be added.
    A class may be derived from multiple classes. For example, "class House(Dwelling, Property):" could be defined.

participation activity
13.1.4: Interactive inheritance tree.

Click a class to see available methods and data for that class.
Inheritance tree 	Selected class pseudocode






    def set_name(self, nm):
    def set_quantity(self, qnty):
    def display(self):




Data attributes:
    self.name
    self.quantity


Selected class code

class Item:
    def __init__(self):
        self.name = ''
        self.quantity = 0

    def set_name(self, nm):
        self.name = nm

    def set_quantity(self, qnty):
        self.quantity = qnty

    def display(self):
        # print name, quantity

participation activity
13.1.5: Derived classes basics.
1)
A class that can serve as the basis for another class is called a _______ class.

2)
Class "Dwelling" has the method open_door(). Class "House" is derived from Dwelling and has the methods open_window() and open_basement(). After h = House() executes, how many different methods can h call, ignoring constructors?

challenge activity
13.1.1: Derived classes.
343716.2144758.qx3zqy7

Type the program's output
class Vehicle:
    def __init__(self):
        self.speed = 0

    def set_speed(self, speed_to_set):
        self.speed = speed_to_set

    def print_speed(self):
        print(self.speed)


class Car(Vehicle):
    def print_car_speed(self):
        print('Driving at: ', end = '')
        self.print_speed()


myCar = Car()
myCar.set_speed(25)
myCar.print_car_speed()

1
2
3
1
2
3
challenge activity
13.1.2: Basic inheritance.
Set course_student's last_name to Smith, age_years to 20, and id_num to 9999.

Sample output for the given program:

Name: Smith, Age: 20, ID: 9999



343716.2144758.qx3zqy7

1 test passed
All tests passed
View your last submission

(*interfaces) For maximal simplicity and brevity in the example, we have used a set of methods that either set or return the value of an attribute. Such an interface to a class is commonly known as a getter/setter design pattern. In Python, the getter/setter interface is better replaced with simple attribute reference operations; e.g., instead of item1.set_name('Hot Pockets'), use item1.name = 'Hot Pockets'.

(*privacy) Python does have a way to support private variables through name mangling using double underscores in front of an identifier, e.g., self.__data. A private variable is mostly used as a way to prevent name collisions in inheritance trees, instead of as a form of information hiding.
How was this section?
Activity summary for assignment:
406 / 412 pts
Due: 12/10/2021, 11:59 PM CST
406 / 412 pts submitted to canvas
13.2 Accessing base class attributes
