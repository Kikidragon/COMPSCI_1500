
8.3 Iterating over a list
List iteration

A programmer commonly wants to access each element of a list. Thus, learning how to iterate through a list using a loop is critical.

Looping through a sequence such as a list is so common that Python supports a construct called a for loop, specifically for iteration purposes. The format of a for loop is shown below.
Figure 8.3.1: Iterating through a list.

for my_var in my_list:
    # Loop body statements go here

Each iteration of the loop creates a new variable by binding the next element of the list to the name my_var. The loop body statements execute during each iteration and can use the current value of my_var as necessary. 1

Programs commonly iterate through lists to determine some quantity about the list's items. Ex: The following program determines the value of the maximum even number in a list:
Figure 8.3.2: Iterating through a list example: Finding the maximum even number.

# User inputs string w/ numbers: '203 12 5 800 -10'
user_input = input('Enter numbers:')

tokens = user_input.split()  # Split into separate strings

# Convert strings to integers
nums = []
for token in tokens:
    nums.append(int(token))

# Print each position and number
print()  # Print a single newline
for index in range(len(nums)):
    value = nums[index]
    print('{}: {}'.format(index, value))

# Determine maximum even number
max_num = None
for num in nums:
    if (max_num == None) and (num % 2 == 0):
        # First even number found
        max_num = num
    elif (max_num != None) and (num > max_num ) and (num % 2 == 0):
        # Larger even number found
        max_num = num

print('Max even #:', max_num)

Enter numbers:3 5 23 -1 456 1 6 83
0: 3
1: 5
2: 23
3: -1
4: 456
5: 1
6: 6
7: 83
Max even #: 456
...
Enter numbers:-5 -10 -44 -2 -27 -9 -27 -9
0:-5
1:-10
2:-44
3:-2
4:-27
5:-9
6:-27
7:-9
Max even #: -2

If the user enters the numbers 7, -9, 55, 44, 20, -400, 0, 2, then the program will output Max even #: 44. The code uses three for loops. The first loop converts the strings obtained from the split() function into integers. The second loop prints each of the entered numbers. Note that the first and second loops could easily be combined into a single loop, but the example uses two loops for clarity. The third loop evaluates each of the list elements to find the maximum even number.

Before entering the first loop, the program creates the list nums as an empty list with the statement nums = []. The program then appends items to the list inside the first loop. Omitting the initial empty list creation would cause an error when the nums.append() function is called, because nums would not actually exist yet.

The main idea of the code is to use a variable max_num to maintain the largest value seen so far as the program iterates through the list. During each iteration, if the list's current element value is even and larger than max_num so far, then the program assigns max_num with current value. Using a variable to track a value while iterating over a list is very common behavior.
participation activity
8.3.1: Using a variable to keep track of a value while iterating over a list.

nums = [1, 4, 15, 456]

max_even = None
for num in nums:
    if num % 2 == 0: # The number is even?
        if max_even == None or num > max_even:  # Greatest even number seen?
            max_even = num


max_even:
num:
4
4
15
456
456
1
None
Finding the maximum even number in a list by iterating over every element.
Captions

    Loop iterates over all elements of list nums.
    Only larger even numbers update the value of max_num.
    Odd numbers, or numbers smaller than max_num, are ignored.
    When the loop ends, max_num is set to the largest even number 456.

A logic error in the above program would be to set max_even initially to 0, because 0 is not in fact the largest value seen so far. This would result in incorrect output (of 0) if the user entered all negative numbers. Instead, the program sets max_even to None.
participation activity
8.3.2: List iteration.

Fill in the missing field to complete the program.
1)
Count how many odd numbers (cnt_odd) there are.

cnt_odd =
for i in num:
    if i % 2 == 1:
        cnt_odd += 1


2)
Count how many negative numbers (cnt_neg) there are.

cnt_neg = 0
for i in num:
    if i < 0:



3)
Determine the number of elements in the list that are divisible by 10. (Hint: the number x is divisible by 10 if x % 10 is 0.)

div_ten = 0
for i in num:
    if :
        div_ten += 1


IndexError and enumerate()

A common error is to try to access a list with an index that is out of the list's index range, e.g., to try to access my_list[8] when my_list's valid indices are 0-7. Accessing an index that is out of range causes the program to automatically abort execution and generate an IndexError. Ex: For a list my_list containing 8 elements, the statement my_list[10] = 42 produces output similar to:

Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
IndexError: list assignment index out of range

Iterating through a list for various purposes is an extremely important programming skill to master.
zyDE 8.3.1: Iterating through a list example: Finding the sum of a list's elements.

Here is another example computing the sum of a list of integers. Note that the code is somewhat different than the code computing the max even value. For computing the sum, the program initializes a variable sum to 0, then simply adds the current iteration's list element value to that sum.

Run the program below and observe the output. Next, modify the program to calculate the following:

    Compute the average, as well as the sum. Hint: You don't actually have to change the loop, but rather change the printed value.
    Print each number that is greater than 21.




The built-in enumerate() function iterates over a list and provides an iteration counter. The program above uses the enumerate() function, which results in the variables pos and token being assigned the current loop iteration element's index and value, respectively. Thus, the first iteration of the loop assigns pos with 0 and token with the first user number; the second iteration assigns pos with 1 and token with the second user number; and so on.
Built-in functions that iterate over lists

Iterating through a list to find or calculate certain values like the minimum/maximum or sum is so common that Python provides built-in functions as shortcuts. Instead of writing a for loop and tracking a maximum value, or adding a sum, a programmer can use a statement such as max(my_list) or sum(my_list) to quickly obtain the desired value.
Table 8.3.1: Built-in functions supporting list objects.
Function 	Description 	Example code 	Example output
all(list) 	True if every element in list is True (!= 0), or if the list is empty. 	print(all([1, 2, 3]))
print(all([0, 1, 2]))

True
False

any(list) 	True if any element in the list is True. 	print(any([0, 2]))
print(any([0, 0]))

True
False

max(list) 	Get the maximum element in the list. 	print(max([-3, 5, 25]))

25

min(list) 	Get the minimum element in the list. 	print(min([-3, 5, 25]))

-3

sum(list) 	Get the sum of all elements in the list. 	print(sum([-3, 5, 25]))

27

zyDE 8.3.2: Using built-in functions with lists.

Complete the following program using functions from the table above to find some statistics about basketball player Lebron James. The code below provides lists of various statistical categories for the years 2003-2013. Compute and print the following statistics:

    Total career points
    Average points per game
    Years of the highest and lowest scoring season

Use loops where appropriate.




participation activity
8.3.3: Lists and built-in functions.

Assume that my_list is [0, 5, 10, 15].
1)
What value is returned by sum(my_list)?

2)
What value is returned by max(my_list)?

3)
What value is returned by any(my_list)?

4)
What value is returned by all(my_list)?

5)
What value is returned by min(my_list)?

challenge activity
8.3.1: Get user guesses.
Write a loop to populate the list user_guesses with a number of guesses. The variable num_guesses is the number of guesses the user will have, which is read first as an integer. Read each guess (an integer) one at a time using int(input()).

Sample output with input:
3
9
5
2

user_guesses: [9, 5, 2]



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
challenge activity
8.3.2: Sum extra credit.
Assign sum_extra with the total extra credit received given list test_grades. Iterate through the list with for grade in test_grades:. The code uses the Python split() method to split a string at each space into a list of string values and the map() function to convert each string value to an integer. Full credit is 100, so anything over 100 is extra credit.

Sample output for the given program with input: '101 83 107 90'

Sum extra: 8

(because 1 + 0 + 7 + 0 is 8)

343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
challenge activity
8.3.3: Hourly temperature reporting.
Write a loop to print all elements in hourly_temperature. Separate elements with a -> surrounded by spaces.

Sample output for the given program with input: '90 92 94 95'

90 -> 92 -> 94 -> 95

Note: 95 is followed by a space, then a newline.

343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission

(*1) Actually, a for loop works on any iterable object. An iterable object is any object that can access each of its elements one at a time -- most sequences like lists, strings, and tuples are iterables. Thus, for loops are not specific to lists.
How was this section?
Activity summary for assignment:
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
8.4 List games
