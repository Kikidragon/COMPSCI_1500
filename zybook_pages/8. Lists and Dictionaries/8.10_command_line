8.10 Command-line arguments

Command-line arguments are values entered by a user when running a program from a command line. A command line exists in some program execution environments, wherein a user can run a program by typing at a command prompt. Ex: To run a Python program named "myprog.py" with an argument specifying the location of a file named "myfile1.txt", the user would enter the following at the command prompt:

> python myprog.py myfile1.txt

The contents of this command line are automatically stored in the list sys.argv, which is stored in the standard library sys module. sys.argv consists of one string element for each argument typed on the command line.

When executing a program, the interpreter parses the entire command line to find all sequences of characters separated by whitespace, storing each as a string within list variable argv. As the entire command line is passed to the program, the name of the program executable is always added as the first element of the list. Ex: For a command line of python myprog.py myfile1.txt, argv has the contents ['myprog.py', 'myfile1.txt'].

The following animation further illustrates.
participation activity
8.10.1: Command-line arguments.
>
python
myprog.py
userArg1
userArg2
sys.argv[0] =
sys.argv[1] =
sys.argv[2] =
myprog.py
'myprog.py'
userArg1
'userArg1'
userArg2
'userArg2'
Captions

    Whitespace separates arguments.
    User text is stored in sys.argv list.

The following program illustrates simple use of command-line arguments, where the program name is myprog, and two additional arguments should be passed to the program.
Figure 8.10.1: Simple use of command line arguments.

import sys

name = sys.argv[1]
age = int(sys.argv[2])

print('Hello {}. '.format(name))
print('{} is a great age.\n'.format(age))



> python myprog.py Tricia 12
Hello Tricia.
12 is a great age.

> python myprog.py Aisha 30
Hello Aisha.
30 is a great age.

> python myprog.py Franco
Traceback (most recent call last):
  File "myprog.py", line 4, in <module>
    age = sys.argv[2]
IndexError: list index out of range

While a program may expect the user to enter certain command-line arguments, there is no guarantee that the user will do so. A common error is to access elements within argv without first checking the length of argv to ensure that the user entered enough arguments, resulting in an IndexError being generated. In the last example above, the user did not enter the age argument, resulting in an IndexError when accessing argv. Conversely, if a user entered too many arguments, extra arguments will be ignored. Above, if the user typed python myprog.py Alan 70 pizza, "pizza" will be stored in argv[3] but will never be used by the program.

Thus, when a program uses command-line arguments, a good practice is to always check the length of argv at the beginning of the program to ensure that the user entered the correct number of arguments. The following program uses the statement if len(sys.argv) != 3 to check for the correct number of arguments, the three arguments being the program, name, and age. If the number of arguments is incorrect, the program prints an error message, referred to as a usage message, that provides the user with an example of the correct command-line argument format. A good practice is to always output a usage message when the user enters incorrect command-line arguments.
Figure 8.10.2: Checking for proper number of command-line arguments.

import sys

if len(sys.argv) != 3:
    print('Usage: python myprog.py name age\n')
    sys.exit(1)  # Exit the program, indicating an error with 1.

name = sys.argv[1]
age = int(sys.argv[2])

print('Hello {}. '.format(name))
print('{} is a great age.\n'.format(age))



> python myprog.exe Tricia 12
Hello Tricia. 12 is a great age.

> python myprog.py Franco
Usage: python myprog.py name age

> python myprog.py Alan 70 pizza
Usage: python myprog.py name age

Note that all command-line arguments in argv are strings. If an argument represents a different type like a number, then the argument needs to be converted using one of the built-in functions such as int() or float().

A single command-line argument may need to include a space. Ex: A person's name might be "Mary Jane". Recall that whitespace characters are used to separate the character typed on the command line into the arguments for the program. If the user provided a command line of python myprog.py Mary Jane 65, the command-line arguments would consist of four arguments: "myprog.py", "Mary", "Jane", and "65". When a single argument needs to contain a space, the user can enclose the argument within quotes "" on the command line, such as the following, which will result in only 3 command-line arguments, where sys.argv has the contents ['myprog.py', 'Mary Jane', '65'].

> python myprog.py "Mary Jane" 65

participation activity
8.10.2: Command-line arguments.
1)
What is the value of sys.argv[1] given the following command-line input (include quotes in your answer): python prog.py Tricia Miller 26

2)
What is the value of sys.argv[1] given the following command-line input (include quotes in your answer): python prog.py 'Tricia Miller' 26

Exploring further:

Command-line arguments can become quite complicated for large programs with many options. There are entire modules of the standard library dedicated to aiding a programmer develop sophisticated argument parsing strategies. The reader is encouraged to explore modules such as argparse and getopt.

    argparse: Parser for command-line options, arguments, and sub-commands
    getopt: C-style parser for command-line options

How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
8.11 Additional practice: Engineering examples
