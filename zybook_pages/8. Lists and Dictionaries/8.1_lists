
zyBooks

    My library
    >
    COMP SCI 1500: Computational Problem Solving home
    >
    8.1: Lists

You have unverified email(s). Please click on your name in the top right corner and browse to your profile to send another verification email.
7.22 String formatting using dictionaries
Students:
Section 8.1 is a part of 2 assignments:
Requirements:
PA
Due: 12/10/2021, 11:59 PM CST
8.1 Lists
Survey

The following questions are part of a zyBooks survey to help us improve our content so we can offer the best experience for students. The survey can be taken anonymously and takes just 3-5 minutes. Please take a short moment to answer by clicking the following link.

Link: Student survey
List basics

The list object type is one of the most important and often used types in a Python program. A list is a container, which is an object that groups related objects together. A list is also a sequence; thus, the contained objects maintain a left-to-right positional ordering. Elements of the list can be accessed via indexing operations that specify the position of the desired element in the list. Each element in a list can be a different type such as strings, integers, floats, or even other lists.

The animation below illustrates how a list is created using brackets [] around the list elements. The animation also shows how a list object contains references to the contained objects.
participation activity
8.1.1: Lists contain references to other objects.
Python interpreter
>>>

my_list = ['hello', -4.2, 5]


>>>

my_list = ['hello', -4.2, 5]


my_list
'hello'
-4.2
5
0
1
2
Python (command line)
Captions

    The user creates a new list.
    The interpreter creates a new object for each list element.
    'my_list' holds references to objects in list.

A list can also be created using the built-in list() function. The list() function accepts a single iterable object argument, such as a string, list, or tuple, and returns a new list object. Ex: list('abc') creates a new list with the elements ['a', 'b', 'c'].
Accessing list elements

An index is a zero-based integer matching to a specific position in the list's sequence of elements. A programmer can reference a specific element in a list by providing an index. Ex: my_list[4] uses an integer to access the element at index 4 (the 5th element) of my_list.

An index can also be an expression, as long as that expression evaluates into an integer. Replacing the index with an integer variable, such as in my_list[i], allows the programmer to quickly and easily lookup the (i+1)th element in a list.
zyDE 8.1.1: List's ith element can be directly accessed using [i]: Oldest people program.

Consider the following program that allows a user to print the age of the Nth oldest known person to have ever lived. Note: The ages are in a list sorted from oldest to youngest.

1. Modify the program to print the correct ordinal number ("1st", "2nd", "3rd", "4th", "5th") instead of "1th", "2th", "3th", "4th", "5th".
2. For the oldest person, remove the ordinal number (1st) from the print statement to say, "The oldest person lived 122 years".

Reminder: List indices begin at 0, not 1, thus the print statement uses oldest_people[nth_person-1], to access the nth_person element (element 1 at index 0, element 2 at index 1, etc.).


The program can quickly access the Nth oldest person's age using oldest_people[nth_person-1]. Note that the index is nth_person-1 rather than just nth_person because a list's indices start at 0, so the first age is at index 0, the second at index 1, etc.

A list's index must be an integer type. The index cannot be a floating-point type, even if the value is 0.0, 1.0, etc.
participation activity
8.1.2: List indices.
Given the following code, what is the output of each code segment?

animals = ['cat', 'dog', 'bird', 'raptor']
print(animals[0])

1)
print(animals[0])

2)
print(animals[2])

3)
print(animals[0 + 1])

4)

i = 3
print(animals[i])

Modifying a list and common list operations

Unlike the string sequence type, a list is mutable and is thus able to grow and shrink without the program having to replace the entire list with an updated copy. Such growing and shrinking capability is called in-place modification. The highlighted lines in the list below indicate ways to perform an in-place modification of the list:
Table 8.1.1: Some common list operations.
Operation 	Description 	Example code 	Example output
my_list = [1, 2, 3] 	Creates a list.

my_list = [1, 2, 3]
print(my_list)



[1, 2, 3]

list(iter) 	Creates a list.

my_list = list('123')
print(my_list)



['1', '2', '3']

my_list[index] 	Get an element from a list.

my_list = [1, 2, 3]
print(my_list[1])



2

my_list[start:end] 	Get a new list containing some of another list's elements.

my_list = [1, 2, 3]
print(my_list[1:3])



[2, 3]

my_list1 + my_list2 	Get a new list with elements of my_list2 added to end of my_list1.

my_list = [1, 2] + [3]
print(my_list)



[1, 2, 3]

my_list[i] = x 	Change the value of the ith element in-place.

my_list = [1, 2, 3]
my_list[2] = 9
print(my_list)



[1, 2, 9]

my_list[len(my_list):] = [x] 	Add the elements in [x] to the end of my_list. The append(x) method (explained in another section) may be preferred for clarity.

my_list = [1, 2, 3]
my_list[len(my_list):] = [9]
print(my_list)



[1, 2, 3, 9]

del my_list[i] 	Delete an element from a list.

my_list = [1, 2, 3]
del my_list[1]
print(my_list)



[1, 3]

Some of the operations in the table might be familiar to the reader because they are sequence type operations also supported by strings. The dark-shaded rows highlight in-place modification operations.

The below animation illustrates how a program can use in-place modifications to modify the contents of a list.
participation activity
8.1.3: In-place modification of a list.

my_list:


my_list  = [ 'h', 'e', 'l', 'l', 'o' ]


my_list[len(my_list):] = [ ' ', 'w', 'o', 'r', 'l', 'd', '.' ]


my_list[11] = '!'


del my_list[5]


h


e


l


l


o


0


1


2


3


4


5


6


7


8


9


10


11


w


o


r


l


d


.


!


Captions

    A list, my_list, is created with the chars 'h', 'e', 'l', 'l', and 'o'.
    Characters ' ', 'w', 'o', 'r', 'l', 'd', and '.' are added to the end of my_list.
    Index 11 is changed to '!' character.
    Element at index 5 is removed from my_list.

The difference between in-place modification of a list and an operation that creates an entirely new list is important. In-place modification affects any variable that references the list, and thus can have unintended side-effects. Consider the following code in which the variables your_teams and my_teams reference the same list (via the assignment your_teams = my_teams). If either your_teams or my_teams modifies an element of the list, then the change is reflected in the other variable as well.

The below Python Tutor tool executes a Python program and visually shows the objects and variables of a program. The tool shows names of variables on the left, with arrows connecting to bound objects on the right. Note that the tool does not show each number or string character as unique objects to improve clarity. The Python Tutor tool is available at www.pythontutor.com.
participation activity
8.1.4: In-place modification of a list.
1	my_teams = ['Raptors', 'Heat', 'Nets']
2	your_teams = my_teams  # Create a shared reference to same list
3
4	my_teams[1] = 'Lakers'  # Modify list element
5
6	print('My teams are:', my_teams)  # Both variables have changed
7	print('Your teams are:', your_teams)  # Both variables have changed
Step 1 of 5
line that has just executed

next line to execute
Frames

Objects

In the above example, changing the elements of my_teams also affects the contents of your_teams. The change occurs because my_teams and your_teams are bound to the same list object. The code my_teams[1] = 'Lakers' modifies the element in position 1 of the shared list object, thus changing the value of both my_teams[1] and your_teams[1].

The programmer of the above example probably meant to only change my_teams. The correct approach would have been to create a copy of the list instead. One simple method to create a copy is to use slice notation with no start or end indices, as in your_teams = my_teams[:].
participation activity
8.1.5: In-place modification of a copy of a list.
1	my_teams = ['Raptors', 'Heat', 'Nets']
2	your_teams = my_teams[:]  # Assign your_teams with a COPY of my_teams
3
4	my_teams[1] = 'Lakers'  # Modify list element
5
6	print('My teams are:', my_teams)  # List element has changed
7	print('Your teams are:', your_teams)  # List element has not changed
Step 1 of 5
line that has just executed

next line to execute
Frames

Objects

On the other hand, assigning a variable with an element of an existing list, and then reassigning that variable with a different value does not change the list.
participation activity
8.1.6: List indexing.

colors = ['red', 'green', 'blue']

colors[1] = 'yellow'  # Change list element
print(colors)

fav_color = colors[2]  # Bind to 'blue'
fav_color = 'turquoise'  # List not altered
print(colors)


['red', 'yellow', 'blue']
['red', 'yellow', 'blue']
colors
fav_color
0
1
2
1
'red'
'green'
'blue'
'yellow'
'turquoise'
Captions

    Indexing operation changes list elements.
    The list does not change when fav_color is updated.

To change the value in the list above, the programmer would have to do an in-place modification operation, such as colors[1] = 'orange'.
participation activity
8.1.7: List basics.
1)
A program can modify the elements of an existing list.
2)
The size of a list is determined when the list is created and cannot change.
3)
All elements of a list must have the same type.
4)
The statement del my_list[2] produces a new list without the element in position 2.
5)
The statement my_list1 + my_list2 produces a new list.
challenge activity
8.1.1: Enter the output for the list.
343716.2144758.qx3zqy7

Type the program's output
user_values = [3, 6, 9]

print(user_values)

1
2
3
4
5
1
2
3
4
5
challenge activity
8.1.2: Modify a list.
Modify short_names by deleting the first element and changing the last element to Joe.

Sample output with input: 'Gertrude Sam Ann Joseph'

['Sam', 'Ann', 'Joe']



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
How was this section?
Activity summary for assignment:
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
8.2 List methods
