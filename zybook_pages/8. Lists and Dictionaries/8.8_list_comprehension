
8.8 List comprehensions

A programmer commonly wants to modify every element of a list in the same way, such as adding 10 to every element. The Python language provides a convenient construct, known as list comprehension, that iterates over a list, modifies each element, and returns a new list consisting of the modified elements.

A list comprehension construct has the following form:
Construct 8.8.1: List comprehension.

new_list = [expression for loop_variable_name in iterable]

A list comprehension has three components:

    An expression component to evaluate for each element in the iterable object.
    A loop variable component to bind to the current iteration element.
    An iterable object component to iterate over (list, string, tuple, enumerate, etc).

A list comprehension is always surrounded by brackets, which is a helpful reminder that the comprehension builds and returns a new list object. The loop variable and iterable object components make up a normal for loop expression. The for loop iterates through the iterable object as normal, and the expression operates on the loop variable in each iteration. The result is a new list containing the values modified by the expression. The below program demonstrates a simple list comprehension that increments each value in a list by 5.
Figure 8.8.1: List comprehension example: A first look.

my_list = [10, 20, 30]
list_plus_5 = [(i + 5) for i in my_list]

print('New list contains:', list_plus_5)



New list contains: [15, 25, 35]

The following animation illustrates:
participation activity
8.8.1: List comprehension.

my_list = [50, 23, -4]
my_list_minus10 = [(i - 10) for i in my_list]


my_list_minus10:
my_list:
40
13
-14
50
23
-4
50
(     - 10)
23
-4
Captions

    My list is created and holds integer values.
    Loop variable i set to each element of my_list.

Programmers commonly prefer using a list comprehension rather than a for loop in many situations. Such preference is due to less code and due to more-efficient execution by the interpreter. The table below shows various for loops and equivalent list comprehensions.
Table 8.8.1: List comprehensions can replace some for loops.
Num 	Description 	For loop 	Equivalent list comprehension 	Output of both programs
1 	Add 10 to every element.

my_list = [5, 20, 50]
for i in range(len(my_list)):
    my_list[ i ] += 10
print(my_list)



my_list = [5, 20, 50]
my_list = [(i+10) for i in my_list]
print(my_list)

	[15, 30, 60]
2 	Convert every element to a string.

my_list = [5, 20, 50]
for i in range(len(my_list)):
    my_list[ i ] = str(my_list[ i ])
print(my_list)



my_list = [5, 20, 50]
my_list = [str(i) for i in my_list]
print(my_list)

	['5', '20', '50']
3 	Convert user input into a list of integers.

inp = input('Enter numbers:')
my_list = []
for i in inp.split():
    my_list.append(int(i))
print(my_list)



inp = input('Enter numbers:')
my_list = [int(i) for i in inp.split()]
print(my_list)

	Enter numbers: 7 9 3
[7, 9, 3]
4 	Find the sum of each row in a two-dimensional list.

my_list = [[5, 10, 15], [2, 3, 16], [100]]
sum_list = []
for row in my_list:
    sum_list.append(sum(row))
print(sum_list)



my_list = [[5, 10, 15], [2, 3, 16], [100]]
sum_list = [sum(row) for row in my_list]
print(sum_list)

	[30, 21, 100]
5 	Find the sum of the row with the smallest sum in a two-dimensional table.

my_list = [[5, 10, 15], [2, 3, 16], [100]]
sum_list = []
for row in my_list:
    sum_list.append(sum(row))
min_row = min(sum_list)
print(min_row)



my_list = [[5, 10, 15], [2, 3, 16], [100]]
min_row = min([sum(row) for row in my_list])
print(min_row)

	21

Note that list comprehension is not an exact replacement of for loops, because list comprehensions create a new list object, whereas the typical for loop is able to modify an existing list.

The third row of the table above has an expression in place of the iterable object component of the list comprehension, inp.split(). That expression is evaluated first, and the list comprehension will loop over the list returned by split().

The last example from above is interesting because the list comprehension is wrapped by the built-in function min(). List comprehension builds a new list when evaluated, so using the new list as an argument to min() is allowed â€“ conceptually the interpreter is just evaluating the more familiar code: min([30, 21, 100]).
participation activity
8.8.2: List comprehension examples.

For the following questions, refer to the table above.
1)
What's the output of the list comprehension program in row 1 if my_list is [-5, -4, -3]?

2)
Alter the list comprehension from row 2 to convert each number to a float instead of a string.

my_list = [5, 20, 50]
my_list = [ for i in my_list]
print(my_list)


3)
What's the output of the list comprehension program from row 3 if the user enters "4 6 100"?

4)
What's the output of the list comprehension program in row 4 if my_list is [[5, 10], [1]]?

5)
Alter the list comprehension from row 5 to calculate the sum of every number contained by my_list.

my_list = [[5, 10, 15], [2, 3, 16], [100]]
sum_list  = ([sum(row) for row in my_list])
print(sum_list)


participation activity
8.8.3: Building list comprehensions.

Write a list comprehension that contains elements with the desired values. Use the name 'i' as the loop variable.
1)
Twice the value of each element in the list variable x.

2)
The absolute value of each element in x. Use the abs() function to find the absolute value of a number.

3)
The largest square root of any element in x. Use math.sqrt() to calculate the square root.

Conditional list comprehensions

A list comprehension can be extended with an optional conditional clause that causes the statement to return a list with only certain elements.
Construct 8.8.2: Conditional list comprehensions.

new_list = [expression for name in iterable if condition]

Using the above syntax will only add an element to the resulting list if the condition evaluates to True. The following program demonstrates list comprehension with a conditional clause that returns a list with only even numbers.
Figure 8.8.2: Conditional list comprehension example: Return a list of even numbers.

# Get a list of integers from the user
numbers = [int(i) for i in input('Enter numbers:').split()]

# Return a list of only even numbers
even_numbers = [i for i in numbers if (i % 2) == 0]
print('Even numbers only:', even_numbers)



Enter numbers: 5 52 16 7 25
Even numbers only: [52, 16]
...
Enter numbers: 8 12 -14 9 0
Even numbers only: [8, 12, -14, 0]

participation activity
8.8.4: Building list comprehensions with conditions.

Write a list comprehension that contains elements with the desired values. Use the name 'i' as the loop variable. Use parentheses around the expression or condition as necessary.
1)
Only negative values from the list x

numbers =

2)
Only negative odd values from the list x

numbers =

challenge activity
8.8.1: List comprehensions.
343716.2144758.qx3zqy7

Type the program's output
my_list = [-1, 0, 1, 2]
new_list = [ number * 3 for number in my_list ]
print(new_list)

1
2
3
4
1
2
3
4
How was this section?
Activity summary for assignment:
406 / 412 pts
Due: 12/10/2021, 11:59 PM CST
406 / 412 pts submitted to canvas
8.9 Sorting lists
