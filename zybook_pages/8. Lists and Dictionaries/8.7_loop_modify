
8.7 Loops modifying lists

Sometimes a program iterates over a list while modifying the elements, such as by changing some elements' values, or by moving elements' positions.
Changing elements' values

The below example of changing element's values combines the len() and range() functions to iterate over a list and increment each element of the list by 5.
Figure 8.7.1: Modifying a list during iteration example.

my_list = [3.2, 5.0, 16.5, 12.25]

for i in range(len(my_list)):
    my_list[ i ] += 5

The figure below shows two programs that each attempt to convert any negative numbers in a list to 0. The program on the right is incorrect, demonstrating a common logic error.
Figure 8.7.2: Modifying a list during iteration example: Converting negative values to 0.
Correct way to modify the list.

user_input = input('Enter numbers: ')

tokens = user_input.split()

# Convert strings to integers
nums = []
for token in tokens:
    nums.append(int(token))

# Print each position and number
print()
for pos, val in enumerate(nums):
    print('{}: {}'.format(pos, val))

# Change negative values to 0
for pos in range(len(nums)):
    if nums[pos] < 0:
        nums[pos] = 0

# Print new numbers
print('New numbers: ')
for num in nums:
    print(num, end=' ')

Enter numbers:5 67 -5 -4 5 6 6 4
0: 5
1: 67
2: -5
3: -4
4: 5
5: 6
6: 6
7: 4
New numbers:
5 67 0 0 5 6 6 4


Incorrect way: list not modified.

user_input = input('Enter numbers:')

tokens = user_input.split()

# Convert strings to integers
nums = []
for token in tokens:
    nums.append(int(token))

# Print each position and number
print()
for pos, val in enumerate(nums):
    print('{}: {}'.format(pos, val))

# Change negative values to 0
for num in nums:
    if num < 0:
        num = 0  # Logic error: temp variable num set to 0

# Print new numbers
print('New numbers: ')
for num in nums:
    print(num, end=' ')

Enter numbers:5 67 -5 -4 5 6 6 4
0: 5
1: 67
2: -5
3: -4
4: 5
5: 6
6: 6
7: 4
New numbers:
5 67 -5 -4 5 6 6 4

The program on the right illustrates a common logic error. A common error when modifying a list during iteration is to update the loop variable instead of the list object. The statement num = 0 simply binds the name num to the integer literal value 0. The reference in the list is never changed.

In contrast, the program on the left correctly uses an index operation nums[pos] = 0 to modify to 0 the reference held by the list in position pos. The below activities demonstrate further; note that only the second program changes the list's values.
participation activity
8.7.1: Incorrect list modification example.
1	nums = [50, 10, -5, -4, 6]
2	for n in nums:
3	    if n < 0:
4	        n = 0
Step 1 of 14
line that has just executed

next line to execute
Frames

Objects
participation activity
8.7.2: Corrected list modification example.
1	nums = [50, 10, -5, -4, 6]
2	for n in range(len(nums)):
3	    if nums[n] < 0:
4	        nums[n] = 0
Step 1 of 14
line that has just executed

next line to execute
Frames

Objects
challenge activity
8.7.1: Iterating through a list using range().
343716.2144758.qx3zqy7

Type the program's output
user_values = [2, 6, 9]

for i in range(len(user_values)):
   print(user_values[i])

1
2
3
4
5
1
2
3
4
5
participation activity
8.7.3: List modification.

Consider the following program:

nums = [10, 20, 30, 40, 50]

for pos in range(len(nums)):
    tmp = nums[pos] / 2
    if (tmp % 2) == 0:
        nums[pos] = tmp

1)
What's the final value of nums[1]?

Changing list size

A common error is to add or remove a list element while iterating over that list. Such list modification can lead to unexpected behavior if the programmer is not careful. Ex: Consider the following program that reads in two sets of numbers and attempts to find numbers in the first set that are not in the second set.
Figure 8.7.3: Modifying lists while iterating: Incorrect program.

nums1 = []
nums2 = []

user_input = input('Enter first set of numbers: ')
tokens = user_input.split()  # Split into separate strings

# Convert strings to integers
print()
for pos, val in enumerate(tokens):
    nums1.append(int(val))
    print('{}: {}'.format(pos, val))

user_input = input('Enter second set of numbers:')
tokens = user_input.split()

# Convert strings to integers
print()
for pos, val in enumerate(tokens):
    nums2.append(int(val))
    print('{}: {}'.format(pos, val))

# Remove elements from nums1 if also in nums2
print()
for val in nums1:
    if val in nums2:
        print('Deleting {}'.format(val))
        nums1.remove(val)

# Print new numbers
print('\nNumbers only in first set:', end=' ')
for num in nums1:
    print(num, end=' ')



Enter first set of numbers:5 10 15 20
0: 5
1: 10
2: 15
3: 20
Enter second set of numbers:15 20 25 30
0: 15
1: 20
2: 25
3: 30

Deleting 15

Numbers only in first set: 5 10 20

The above example iterates over the list nums1, deleting an element from the list if the element is also found in the list nums2. The programmer expected a certain result, namely that after removing an element from the list, the next iteration of the loop would reference the next element as normal. However, removing the element shifts the position of each following element in the list to the left by one. In the example above, removing 15 from nums1 shifts the value 20 left into position 2. The loop, having just iterated over position 2 and removing 15, moves to the next position and finds the end of the list, thus never evaluating the final value 20.

The problem illustrated by the example above has a simple fix: Iterate over a copy of the list instead of the actual list being modified. Copying the list allows a programmer to modify, swap, add, or delete elements without affecting the loop iterations. The easiest way to copy the iterating list is to use slice notation inside of the loop expression, as in:
Figure 8.7.4: Copy a list using [:].

for item in my_list[:]:
    # Loop statements.

participation activity
8.7.4: List modification.

nums1 = [5, 10, 15]
nums2 = [10, 15]

for val in nums1:
    if val in nums2:
        nums1.remove(val)

#...


nums1 = [5, 10, 15]
nums2 = [10, 15]

for val in nums1[:]:
    if val in nums2:
        nums1.remove(val)

#...


nums2:
nums2:
nums1:
nums1:
10
15
5
15
10
15
0
1
copy of
nums1:
0
1
2
5
10
15
10
2
1
val
0
1
2
5
10
15
val
1
Captions

    The loop, having just iterated over position 1 and removing 10, moves to the next position and finds the end of the list, thus never evaluating the final value 15.
    The problem illustrated by the example above can be fixed by iterating over a copy of the list instead of the actual list being modified.

zyDE 8.7.1: Modify the above program to work correctly.

Modify the program (copied from above) using slice notation to iterate over a copy of the list.



participation activity
8.7.5: Modifying a list while iterating.
1)
Iterating over a list and deleting elements from the original list might cause a logic program error.
2)
A programmer can iterate over a copy of a list to safely make changes to that list.
How was this section?
Activity summary for assignment:
406 / 412 pts
Due: 12/10/2021, 11:59 PM CST
406 / 412 pts submitted to canvas
8.8 List comprehensions
