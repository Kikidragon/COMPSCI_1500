
5.1 Loops (general)
Loop concept

People who have children may be familiar with looping around the block until a baby falls asleep.
participation activity
5.1.1: Loop concept: Driving a baby around the block.
Awake?
3rd check
2nd check
1st check
False
True
Baby in car
Captions

    Parents may be familiar with this scenario: Driving home, baby is awake. Parents circle the block, hoping the baby will fall asleep.
    After first loop, baby is still awake, so parents loop again.
    After second loop, baby is asleep, so parents head home for a peaceful evening.

participation activity
5.1.2: Loop concept.

Consider the example above.
1)
When the parents first checked, was the baby awake?
2)
After the first loop, was the baby awake?
3)
After the second loop, was the baby awake?
4)
How many loops around the block did the parents make?
5)
Where was the decision point for whether to loop: At the top of the street or bottom?
Loop basics

A loop is a program construct that repeatedly executes the loop's statements (known as the loop body) while the loop's expression is true; when false, execution proceeds past the loop. Each time through a loop's statements is called an iteration.
participation activity
5.1.3: A simple loop: Summing the input values.
Put sum to output
sum = sum + val
val = Get next input

While  val > -1
val = Get next input
sum = 0
Output
Input
sum:
0
2
6
7
2
4
1
-1
2
4
1
-1
7
Loop
Captions

    A loop is like a branch, but jumping back to the expression when done. Thus, the loop's statements may execute multiple times, before execution proceeds past the loop.
    This program gets an input value. If the value > -1, the program adds the value to a sum, gets another input, and repeats. val is 2, so the loop's statements execute, making sum 2.
    The loop's statements ended by getting the next input, which is 4. The loop's expression 4 > -1 is true, so the loop's statements execute again, making sum 2 + 4 or 6.
    The loop's statements got the next input of 1. The loop's expression 1 > -1 is true, so the loop's statements execute a third time, making sum 6 + 1 or 7.
    The next input is -1. This time, -1 > -1 is false, so the loop is not entered. Instead, execution proceeds past the loop, where a statement puts sum, which is 7, to the output.

Loop example: Computing an average

A loop can be used to compute the average of a list of numbers.
participation activity
5.1.4: Loop example: Computing an average.
Put avg to output

avg = sum / num

sum = sum + val
num = num + 1
val = Get next input

While  val > -1
val = Get next input
num = 0
sum = 0
Output
2
4
9
-1
2
4
9
-1
Input
3
2
1
0
num:
15
6
2
0
sum:
15
3
/
5
Captions

    The program computes an average of a list of numbers (a negative ends the list). The first input is 2, so the loop is entered. Sum becomes 2, and num is incremented to 1.
    The next input is 4. The loop is entered, so sum becomes 2 + 4 or 6, and num is incremented to 2.
    The next input is 9, so the loop is entered. Sum becomes 6 + 9 or 15, and num is incremented to 3.
    The next input is -1, so the loop is not entered. 15 / 3 or 5 is output.

participation activity
5.1.5: Loop example: Average.

Consider the computing an average example above.
1)
In the example above, the first value gotten from input was 2. That caused the loop body to be _____.
2)
At the end of the loop body, the _____.
3)
With what value was sum initialized?
4)
Each time through the loop, the sum variable is increased by _____.
5)
What was variable num's value after the loop was done iterating?
6)
Before the loop, the first input value is gotten. If that input was negative (unlike the data in the example above), the loop's body would _____.
Example: Counting specific values in a list

Programs execute one statement at a time. Thus, using a loop to examine a list of values one value at a time and updating variables along the way, as in the above examples, is a common programming task.

Below is a task to help a person get accustomed to examining a list of values one value at a time. The task asks a person to count the number of negative values, incrementing a variable to keep count.
participation activity
5.1.6: Counting negative values in a list of values.
Click "Increment" if a negative value is seen.
	Counter
X 	X 	X 	X 	X 	X 	X
	0

Time -Best time -
participation activity
5.1.7: Counting negative values.

Complete the program such that variable count ends having the number of negative values in an input list of values (the list ends with 0). So if the input is -1 -5 9 3 0, then count should end with 2.

count = 0
val = Get next input

While val is not 0
   if __(A)__
      __(B)__

   val = Get next input

1)
What should expression (A) be?
2)
What should statement (B) be?
3)
If the input value is 0, does the loop body execute?
Example: Finding the max value

Examining items one at a time and updating a variable can achieve some interesting computations. The task below is to find the maximum value in a list of positive values. A variable stores the max value seen so far. Each input value is compared with that max, and if greater, that value replaces that max. The max value is initialized with -1 so that such comparison works even for the first input value.
participation activity
5.1.8: Find the maximum value in the list of values.
Click "Store value" if a new maximum value is seen.
	max
X 	X 	X 	X 	X 	X 	X


Time -Best time -
participation activity
5.1.9: Determining the max value.

Complete the program such that variable max ends having the maximum value in an input list of positive values (the list ends with 0). So if the input is 22 5 99 3 0, then max should end as 99.

max = -1
val = Get next input

while val is not 0
   If __(A)__
      __(B)__

   val = Get next input

1)
What should expression (A) be?
2)
What should statement (B) be?
3)
Does the final value of max depend on the order of inputs? In particular, would max be different for inputs 22 5 99 3 0 versus inputs 99 3 5 22 0?
4)
For inputs 5 10 7 20 8 0, with what values should max be assigned?
How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
5.2 While loops
