
9.4 Class and instance object types

A program with user-defined classes contains two additional types of objects: class objects and instance objects. A class object acts as a factory that creates instance objects. When created by the class object, an _instance object_ is initialized via the __init__ method. The following tool demonstrates how the __init__ method of the Time class object is used to initialize two new Time instance objects:
participation activity
9.4.1: Class Time's init method initializes two new Time instance objects.
1	class Time:
2	    def __init__(self):
3	        self.hours = 0
4	        self.minutes = 0
5
6	time1 = Time()
7	time1.hours = 5
8	time1.minutes = 30
9
10	time2 = Time()
11	time2.hours = 7
12	time2.minutes = 45
Step 1 of 15
line that has just executed

next line to execute
Frames

Objects

Class and instance objects are namespaces used to group data and functions together.

    A class attribute is shared amongst all of the instances of that class. Class attributes are defined within the scope of a class.

Figure 9.4.1: A class attribute is shared between all instances of that class.

class MarathonRunner:
    race_distance = 42.195  # Marathon distance in Kilometers

    def __init__(self):
        # ...

    def get_speed(self):
        # ...

runner1 = MarathonRunner()
runner2 = MarathonRunner()

print(MarathonRunner.race_distance)  # Look in class namespace
print(runner1.race_distance)  # Look in instance namespace
print(runner2.race_distance)



42.195
42.195
42.195

    An instance attribute can be unique to each instance.

Figure 9.4.2: An instance attribute can be different between instances of a class.

class MarathonRunner:
    race_distance = 42.195  # Marathon distance in Kilometers

    def __init__(self):
        self.speed = 0
        # ...

    def get_speed(self):
        # ...

runner1 = MarathonRunner()
runner1.speed = 7.5

runner2 = MarathonRunner()
runner2.speed = 8.0

print('Runner 1 speed:', runner1.speed)
print('Runner 2 speed:', runner2.speed)



Runner 1 speed: 7.5
Runner 2 speed: 8.0

Instance attributes are created using dot notation, as in self.speed = 7.5 within a method, or runner1.speed = 7.5 from outside of the class' scope.

Instance and class namespaces are linked to each other. If a name is not found in an instance namespace, then the class namespace is searched.
participation activity
9.4.2: Class and instance namespaces.

class MarathonRunner:
    race_distance = 42.195  # Same for all runners

    def __init__(self):
        self.speed = 0

runner1 = MarathonRunner()
runner2 = MarathonRunner()

print(runner1.race_distance)
print(runner2.race_distance)


MarathonRunner
runner1
runner2
race_distance
42.195
__init__
<func>
speed
0
speed
0
42.195
42.195
When using dot notation on an instance object, the instance namespace is searched first, then the class namespace.
Captions

    Class namespace contains all class attributes
    Instance attributes added to each instance's namespace only
    Using dot notation initiates a search that first looks in the instance namespace, then the class namespace.

Besides methods, typical class attributes are variables required only by instances of the class. Placing such constants in the class' scope helps to reduce possible collisions with other variables or functions in the global scope.
Figure 9.4.3: Changing the gmt_offset class attribute affects behavior of all instances.

class Time:
    gmt_offset = 0  # Class attribute. Changing alters print_time output

    def __init__(self):  # Methods are a class attribute too
        self.hours = 0  # Instance attribute
        self.minutes = 0  # Instance attribute

    def print_time(self):  # Methods are a class attribute too
        offset_hours = self.hours + self.gmt_offset  # Local variable
        print('Time -- %d:%d' % (offset_hours, self.minutes))


time1 = Time()
time1.hours = 10
time1.minutes = 15

time2 = Time()
time2.hours = 12
time2.minutes = 45

print ('Greenwich Mean Time (GMT):')
time1.print_time()
time2.print_time()

Time.gmt_offset = -8  # Change to PST time (-8 GMT)

print('\nPacific Standard Time (PST):')
time1.print_time()
time2.print_time()



Greenwich Mean Time (GMT):
Time -- 10:15
Time -- 12:45

Pacific Standard Time (PST):
Time -- 2:15
Time -- 4:45

participation activity
9.4.3: Class and instance objects.

    Instance methods
    Class attribute
    Instance attribute
    Class object
    Instance object

A factory for creating new class instances.
Represents a single instance of a class.
Functions that are also class attributes.
A variable that exists in a single instance.
A variable shared with all instances of a class.

Note that even though class and instance attributes have unique namespaces, a programmer can use the "self" parameter to reference either type. For example, self.hours finds the instance attribute hours, and self.gmt_offset finds the class attribute gmt_offset. Thus, if a class and instance both have an attribute with the same name, the instance attribute will always be referenced. Good practice is to avoid name collisions between class and instance attributes.
participation activity
9.4.4: Identifying class and instance attributes.
1)
What type of attribute is number?

class PhoneNumber:
    def __init__(self):
        self.number = '805-555-2231'

2)
What type of attribute is number?

class PhoneNumber:
    def __init__(self):
        self.number = None

garrett = PhoneNumber()
garrett.number = '805-555-2231'

3)
What type of attribute is area_code?

class PhoneNumber:
    area_code = '805'
    def __init__(self):
        self.number = '555-2231'

challenge activity
9.4.1: Classes and instances.
343716.2144758.qx3zqy7

Type the program's output
class Shape:
    def __init__(self):
       self.color = None

shape1 = Shape()
shape2 = Shape()
shape2.color = 'indigo'

print(shape1.color)
print(shape2.color)

1
2
3
4
5
6
7
1
2
3
4
5
6
7
How was this section?
Activity summary for assignment:
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
9.5 Class example: Seat reservation system
