
9.2 Classes: Grouping data

Multiple variables are frequently closely related and should thus be treated as one variable with multiple parts. For example, two variables called hours and minutes might be grouped together in a single variable called time. The class keyword can be used to create a user-defined type of object containing groups of related variables and functions.
Construct 9.2.1: The class keyword.

class ClassName:
    # Statement-1
    # Statement-2
    # ...
    # Statement-N

A class defines a new type that can group data and functions to form an object. The object maintains a set of attributes that determines the data and behavior of the class. For example, the following code defines a new class containing two attributes, hours and minutes, whose values are initially 0:
Figure 9.2.1: Defining a new class object with two data attributes.

class Time:
    """ A class that represents a time of day """
    def __init__(self):
        self.hours = 0
        self.minutes = 0

The programmer can then use instantiation to define a new Time class variable and access that variable's attributes. An instantiation operation is performed by "calling" the class, using parentheses like a function call as in my_time = Time(). An instantiation operation creates an instance, which is an individual object of the given class. An instantiation operation automatically calls the __init__ method defined in the class definition. A method is a function defined within a class. The __init__ method, commonly known as a constructor, is responsible for setting up the initial state of the new instance. In the example above, the __init__ method creates two new attributes, hours and minutes, and assigns default values of 0.

The __init__ method has a single parameter "self", that automatically references the instance being created. A programmer writes an expression such as self.hours = 0 within the __init__ method to create a new attribute hours.
Figure 9.2.2: Using instantiation to create a variable using the Time class.

class Time:
    """ A class that represents a time of day """
    def __init__(self):
        self.hours = 0
        self.minutes = 0


my_time = Time()
my_time.hours = 7
my_time.minutes = 15

print('{} hours'.format(my_time.hours), end=' ')
print('and {} minutes'.format(my_time.minutes))



7 hours and 15 minutes

Attributes can be accessed using the attribute reference operator "." (sometimes called the member operator or dot notation).
participation activity
9.2.1: Using classes and attribute reference.

class Time:
    def __init__(self):
        self.hours = 0
        self.minutes = 0

time1 = Time()
time1.hours = 7
time1.minutes = 15


time1
hours
minutes
7
15
0
0
Captions

    The Time() method creates a time object, time1, and initializes time1.hours and time1.minutes to 0.
    Attributes can be accessed using the "." attribute reference operator.

A programmer can create multiple instances of a class in a program, with each instance having different attribute values.
Figure 9.2.3: Multiple instances of a class.

class Time:
    """ A class that represents a time of day """
    def __init__(self):
        self.hours = 0
        self.minutes = 0


time1 = Time()  # Create an instance of the Time class called time1
time1.hours = 7
time1.minutes = 30

time2 = Time()  # Create a second instance called time2
time2.hours = 12
time2.minutes = 45

print('{} hours and {} minutes'.format(time1.hours, time1.minutes))
print('{} hours and {} minutes'.format(time2.hours, time2.minutes))



7 hours and 30 minutes
12 hours and 45 minutes

Good practice is to use initial capitalization for class names. Thus, appropriate names might include LunchMenu, CoinAmounts, or PDFFileContents.
participation activity
9.2.2: Class terms.

    class
    __init__
    self
    instance
    attribute

A name following a "." symbol.
A method parameter that refers to the class instance.
An instantiation of a class.
A constructor method that initializes a class instance.
A group of related variables and functions.
participation activity
9.2.3: Classes.
1)
A class can be used to group related variables together.
2)
The __init__ method is called automatically.
3)
Following the statement t = Time(), t references an instance of the Time class.
participation activity
9.2.4: Classes.
1)
Given the above definition of the Time class, what is the value of time1.hours after the following code executes?

time1 = Time()

2)
Given the above definition of the Time class, what is the value of time1.hours after the following code executes?

time1 = Time()
time1.hours = 7

3)
Given the above definition of the Time class, what is the value of time2.hours after the following code executes?

time1 = Time()
time1.hours = 7

time2 = time1

challenge activity
9.2.1: Enter the output of grouping data.
343716.2144758.qx3zqy7

Type the program's output
class Person:
   def __init__(self):
      self.name = ''

person1 = Person()
username = 'Ina'

person1.name = username
print('This is ' + person1.name)

1
2
3
1
2
3
challenge activity
9.2.2: Declaring a class.
Declare a class named PatientData that contains two attributes named height_inches and weight_pounds.

Sample output for the given program with inputs: 63 115

Patient data (before): 0 in, 0 lbs
Patient data (after): 63 in, 115 lbs



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
challenge activity
9.2.3: Access a class' attributes.
Print the attributes of the InventoryTag object red_sweater.

Sample output for the given program with inputs: 314 500

ID: 314
Qty: 500



343716.2144758.qx3zqy7
1 test passed
All tests passed
View your last submission
How was this section?
Activity summary for assignment:
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
9.3 Instance methods
