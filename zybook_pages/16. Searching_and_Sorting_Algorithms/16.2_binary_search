
16.2 Binary search
Using binary search

Linear search may require searching all list elements, which can lead to long runtimes. For example, searching for a contact on a smartphone one-by-one from first to last can be time consuming. Because a contact list is sorted, a faster search, known as binary search, checks the middle contact first. If the desired contact comes alphabetically before the middle contact, binary search will then search the first half and otherwise the last half. Each step reduces the contacts that need to be searched by half.
participation activity
16.2.1: Using binary search to search contacts on your phone.
Tung
Sharod
Robert
Pooja
Nigel
Muhammad
Alejandro
Captions

    A contact list stores contacts sorted by name. Searching for Pooja using a binary search starts by checking the middle contact.
    The middle contact is Muhammad. Pooja is alphabetically after Muhammad, so the binary search only searches the contacts after Muhammad. Only half the contacts now need to be searched.
    Binary search continues by checking the middle element between Muhammad and the last contact. Pooja is before Sharod, so the search continues with only those contacts between Muhammad and Sharod, which is one fourth of the contacts.
    The middle element between Muhammad and Sharod is Pooja. Each step reduces the number of contacts to search by half.

participation activity
16.2.2: Using binary search to search a contact list.

A contact list is searched for Bob.
Assume the following contact list: Amy, Bob, Chris, Holly, Ray, Sarah, Zoe
1)
What is the first contact searched?

2)
What is the second contact searched?

Binary search algorithm

Binary search is a faster algorithm for searching a list if the list's elements are sorted and directly accessible (such as a list). Binary search first checks the middle element of the list. If the search key is found, the algorithm returns the matching location. If the search key is not found, the algorithm repeats the search on the remaining left sublist (if the search key was less than the middle element) or the remaining right sublist (if the search key was greater than the middle element).
participation activity
16.2.3: Binary search efficiently searches sorted list by reducing the search space by half each iteration.
Search key:
16
numbers:
0
1
2
3
4
5
6
7
2
5
6
14
16
24
32
63
Search element found at index 3
high
low
mid =
(high + low) / 2
(          ) / 2
3
7
0
+
mid
16
!= 14
> 14
low = mid + 1 = 4
mid = (high + low) / 2 = 5
< 24
high = mid - 1 = 4
mid = (4 + 4) / 2 = 4
== 16
Search key found at index 4
Unsearched
Searched
Current
Captions

    Elements with indices between low and high remain to be searched.
    Search starts by checking the middle element.
    If search key is greater than element, then only elements in right sublist need to be searched.
    Each iteration reduces search space by half. Search continues until key found or search space is empty.

Figure 16.2.1: Binary search algorithm.

def binary_search(numbers, key):
    low = 0
    high = len(numbers) - 1

    while high >= low:
        mid = (high + low) // 2
        if numbers[mid] < key:
            low = mid + 1
        elif numbers[mid] > key:
            high = mid - 1
        else:
            return mid
    return -1 # not found


numbers = [2, 4, 7, 10, 11, 32, 45, 87]
print('NUMBERS:', end=' ')
for num in numbers:
    print(num, end=' ')
print()

key = int(input('Enter a value: '))
key_index = binary_search(numbers, key)

if key_index == -1:
    print(str(key) + ' was not found.')
else:
    print('Found ' + str(key) + ' at index ' + str(key_index) + '.')

NUMBERS: 2 4 7 10 11 32 45 87
Enter a value: 10
Found 10 at index 3.
...
NUMBERS: 2 4 7 10 11 32 45 87
Enter a value: 17
17 was not found.

participation activity
16.2.4: Binary search algorithm execution.

Given list: [ 4, 11, 17, 18, 25, 45, 63, 77, 89, 114 ].
1)
How many list elements will be checked to find the value 77 using binary search?

2)
How many list elements will be checked to find the value 17 using binary search?

3)
Given a list with 32 elements, how many list elements will be checked if the key is less than all elements in the list, using binary search?

Binary search efficiency

Binary search is incredibly efficient in finding an element within a sorted list. During each iteration or step of the algorithm, binary search reduces the search space (i.e., the remaining elements to search within) by half. The search terminates when the element is found or the search space is empty (element not found). For a 32 element list, if the search key is not found, the search space is halved to have 16 elements, then 8, 4, 2, 1, and finally none, requiring only 6 steps. For an N element list, the maximum number of steps required to reduce the search space to an empty sublist is
. Ex:

.
participation activity
16.2.5: Speed of linear search versus binary search to find a number within a sorted list.
2
Linear search:
Binary search:
4
7
10
11
32
45
87
99
Unsearched
Searched
Current
Search key:
32
2
4
7
10
11
32
45
87
99
1
3
2
1
2
3
4
5
6
Captions

    A binary search begins with the middle element of the list. Each subsequent search reduces the search space by half. Using binary search, a match was found with only 3 comparisons.
    Using linear search, a match was found after 6 comparisons. Compared to a linear search, binary search is incredibly efficient in finding an element within a sorted list.

If each comparison takes 1 µs (1 microsecond), a binary search algorithm's runtime is at most 20 µs to search a list with 1,000,000 elements, 21 µs to search 2,000,000 elements, 22 µs to search 4,000,000 elements, and so on. Ex: Searching Amazon's online store, which has more than 200 million items, requires less than 28 µs; up to 7,000,000 times faster than linear search.
participation activity
16.2.6: Linear and binary search runtime.

Answer the following questions assuming each comparison takes 1 µs.
1)
Given a list of 1024 elements, what is the runtime for linear search if the search key is less than all elements in the list?

 µs

2)
Given a list of 1024 elements, what is the runtime for binary search if the search key is greater than all elements in the list?

 µs

How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
16.3 O notation
