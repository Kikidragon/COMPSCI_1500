
4.10 Order of evaluation
Precedence rules

The order in which operators are evaluated in an expression is known as precedence rules. Arithmetic, logical, and relational operators are evaluated in the order shown below.
Table 4.10.1: Precedence rules for arithmetic, logical, and relational operators.
Operator/Convention 	Description 	Explanation
( ) 	Items within parentheses are evaluated first 	In (a * (b + c)) - d, the + is evaluated first, then *, then -.
* / % + - 	Arithmetic operators (using their precedence rules; see earlier section) 	z - 45 * y < 53 evaluates * first, then -, then <.
<   <=   >   >=   ==   != 	Relational, (in)equality, and membership operators 	x < 2 or x >= 10 is evaluated as (x < 2) or (x >= 10) because < and >= have precedence over or.
not 	not (logical NOT) 	not x or y is evaluated as (not x) or y
and 	Logical AND 	x == 5 or y == 10 and z != 10 is evaluated as (x == 5) or ((y == 10) and (z != 10)) because and has precedence over or.
or 	Logical OR 	  x == 7 or x < 2 is evaluated as (x == 7) or (x < 2) because < and == have precedence over or
participation activity
4.10.1: Applying the precedence rules to an expression can be thought of as a 'tree'.
x + 1 > y * z or z == 3
x
1
or
y
z
*
/
\
+
/
\
>
z
==
3
/
\
/
\
\
/
\
6
3
18
7
8
False
3
True
True
Captions

    Expressions like x + 1 > y * z or z == 3 are evaluated using precedence rules. Among +, >, *, or, and ==, the * comes first.
    Next comes +, then ==, and finally or.
    The expression is actually treated like a "tree", evaluated from the bottom upwards.
    If x is 7, y is 6, and z is 3, then y * z is 18. Next, x + 1 is 8. Next, 8 > 18 is False. Next, z == 3 is True. Finally, False or True is True.

participation activity
4.10.2: Order of evaluation.

To teach precedence rules, these questions intentionally omit parentheses; good style would use parentheses to make order of evaluation explicit.
1)
Which operator is evaluated first?
not y and x
2)
Which operator has precedence?
w + 3 > x - y * z
3)
In what order are the operators evaluated?
w + 3 != y - 1 and x
4)
To what does this expression evaluate, given x = 4, y = 7.
x == 3 or x + 1 > y
Common error: Missing parentheses

A common error is to write an expression that is evaluated in a different order than expected. Good practice is to use parentheses in expressions to make the intended order of evaluation explicit. For example, a programmer might write:

    not a == b intending to mean (not a) == b, but in fact the interpreter computes not (a == b) because equality operators (==) have precedence over logical operations (not).
    w and x == y and z intending (w and x) == (y and z), but the interpreter computes (w and (x == y)) and z because == has precedence over and.
    not x + y < 5 intending (not x) + y < 5, but the interpreter computes not ((x + y) < 5) because the addition operator + has the highest precedence and is computed first, followed by the relational operation <, and finally the logical not operation.

participation activity
4.10.3: Common errors in expressions.
1)
not x == 3 evaluates as not (x == 3).
2)
w + x  == y + z evaluates as (w + x) == (y + z).
3)
w and x == y and z evaluates as (w and x) == (y and z).
participation activity
4.10.4: Order of evaluation.

Which illustrates the actual order of evaluation via parentheses?
1)
not green == red
2)
bats < birds or birds < insects
3)
not (bats < birds) or (birds < insects)
4)
(num1 == 9) or (num2 == 0) and (num3 == 0)
How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
4.11 Code blocks and indentation
