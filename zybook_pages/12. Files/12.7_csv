
12.7 Comma separated values files

Text data is commonly organized in a spreadsheet format using columns and rows. A comma separated values (csv) file is a simple text-based file format that uses commas to separate data items, called fields. Below is an example of a typical csv file that contains information about student scores:
Figure 12.7.1: Contents of a csv file.

name,hw1,hw2,midterm,final
Petr Little,9,8,85,78
Sam Tarley,10,10,99,100
Joff King,4,2,55,61

Each line in the file above represents a row, and fields between commas on each row are in the same column as fields in the same position in each line. For example, the first row contains the items "name", "hw1", "hw2", "midterm", and "final"; the second row contains "Petr Little", "9", "8", "85" and "78". The first column contains "name", "Petr Little", "Sam Tarley", and "Joff King"; the second column contains "hw1", "9", "10", and "4".

The Python standard library csv module can be used to help read and write files in the csv format. To read a file using the csv module, a program must first create a reader object, passing a file object created via open. The reader object is an iterable – iterating over the reader using a for loop returns each row of the csv file as a list of strings, where each item in the list is a field from the row.
Figure 12.7.2: Reading each row of a csv file.

import csv

with open('grades.csv', 'r') as csvfile:
    grades_reader = csv.reader(csvfile, delimiter=',')

    row_num = 1
    for row in grades_reader:
        print('Row #{}:'.format(row_num), row)
        row_num += 1

	Echoed file contents:

Row #1: ['name', 'hw1', 'hw2', 'midterm', 'final']
Row #2: ['Petr Little', '9', '8', '85', '78']
Row #3: ['Sam Tarley', '10', '10', '99', '100']
Row #4: ['Joff King', '4', '2', '55', '61']

The optional delimiter argument in the csv.reader() function specifies the character used in the csv file to separate fields; by default a comma is used. In some cases, the field itself may contain a comma – for example if the name of a student was specified as "lastname,firstname". In such a case, the csv file might instead use semicolons or some other rare character, e.g., Little, Petr;9;8;85;78. An alternative to changing the delimiter is to use quotes around the item containing the comma, e.g., "Little, Petr",9,8,85,78.

If the contents of the fields are numeric, then a programmer may want to convert the strings to integer or floating-point values to perform calculations with the data. The example below reads each row using a reader object and calculates a student's final score in the class:
Figure 12.7.3: Using csv file contents to perform calculations.

import csv

# Dictionary that maps student names to a list of scores
grades = {}

# Use with statement to guarantee file closure
with open('grades.csv', 'r') as csvfile:
    grades_reader = csv.reader(csvfile, delimiter=',')

    first_row = True
    for row in grades_reader:
        # Skip the first row with column names
        if first_row:
            first_row = False
            continue

        ## Calculate final student grade ##

        name = row[0]

        # Convert score strings into floats
        scores = [float(cell) for cell in row[1:]]

        hw1_weighted = scores[0]/10 * 0.05
        hw2_weighted = scores[1]/10 * 0.05
        mid_weighted = scores[2]/100 * 0.40
        fin_weighted = scores[3]/100 * 0.50

        grades[name] = (hw1_weighted + hw2_weighted +
                        mid_weighted + fin_weighted) * 100

for student, score in grades.items():
    print('{} earned {:.1f}%'.format(student, score))



Petr Little earned 81.5%
Sam Tarley earned 99.6%
Joff King earned 55.5%

A programmer can also use the csv module to write text into a csv file, using a writer object. The writer object's writerow() and writerows methods can be used to write a list of strings into the file as one or more rows.
Figure 12.7.4: Writing rows to a csv module.

import csv

row1 = ['100', '50', '29']
row2 = ['76', '32', '330']

with open('gradeswr.csv', 'w') as csvfile:
    grades_writer = csv.writer(csvfile)

    grades_writer.writerow(row1)
    grades_writer.writerow(row2)

    grades_writer.writerows([row1, row2])

	final gradeswr.csv contents:

100,50,29
76,32,330
100,50,29
76,32,330

participation activity
12.7.1: Comma separated values files.

The file "myfile.csv" contains the following contents:

Airline,Destination,Departure time,Plane
Southwest,Phoenix,615,B747
Alitalia,Milan,1545,B757
British Airways,London,1230,A380

1)
Complete the statement to create a csv module reader object to read myfile.csv.

import csv
with open('myfile.csv', 'r') as myfile:
    csv_reader =


2)
Complete the statement such that the program prints the destination of each flight in myfile.csv.

import csv
with open('myfile.csv', 'r') as myfile:
    csv_reader = csv.reader(myfile)
    for row in csv_reader:
        print()

How was this section?
Activity summary for assignment: Participation
1097 / 1097 pts
Due: 12/10/2021, 11:59 PM CST
1097 / 1097 pts submitted to canvas
12.8 LAB: Words in a range (lists)
